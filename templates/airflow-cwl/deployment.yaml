kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  name: {{ .Values.airflow.name }}
  namespace: {{ .Values.airflow.project }}
  labels:
    # app.kubernetes.io/component: web
    # app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: {{ .Values.airflow.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      # app.kubernetes.io/component: web
      # app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: {{ .Values.airflow.name }}
  template:
    metadata:
      labels:
        # app.kubernetes.io/component: web
        # app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: {{ .Values.airflow.name }}
        # helm.sh/chart: airflow-11.2.0
    spec:
      restartPolicy: Always
      serviceAccountName: default
      schedulerName: default-scheduler
      # affinity:
      #   podAntiAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution:
      #       - weight: 1
      #         podAffinityTerm:
      #           labelSelector:
      #             matchLabels:
      #               # app.kubernetes.io/component: web
      #               # app.kubernetes.io/instance: my-release
      #               app.kubernetes.io/name: {{ .Values.airflow.name }}
      #           namespaces:
      #             - app.kubernetes.io/name: {{ .Values.airflow.project }}
      #           topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 0
      containers:
        - resources: {}
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          terminationMessagePath: /dev/termination-log
          name: airflow
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 180
            timeoutSeconds: 5
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          env:
           
# ======= EXAMPLES secretKeyRef

            # - name: AIRFLOW_FERNET_KEY
            #   valueFrom:
            #     secretKeyRef:
            #       name: my-release-airflow
            #       key: airflow-fernetKey
            # - name: AIRFLOW_SECRET_KEY
            #   valueFrom:
            #     secretKeyRef:
            #       name: my-release-airflow
            #       key: airflow-secretKey

# ======= env from airflow-cwl-docker/.env_example_postgres_conda

            ### Profiles of Docker-Compose and the Conda usage pointer
              # COMPOSE_PROFILES [postgres,null]
              # AIRFLOW_CONDA_ENV [conda_default,null]
              #
              ###
              # COMPOSE_PROFILES=postgres
              # AIRFLOW_CONDA_ENV="conda_default"
              ###
              # Postgresql 
              # POSTGRE_SERVER=postgres
              # POSTGRE_DB=airflow
              # POSTGRE_USER=airflow
              # POSTGRE_PASS=airflow


              ### Available options and default values
              ## Postgres
              # POSTGRE_USER=airflow
              # POSTGRE_PASS=airflow
              # POSTGRE_DB=airflow
              # POSTGRES_PORT=5432

# ======= Airflow parameters from airflow-cwl-docker/.env_example_postgres_conda
            - name: POSTGRE_SERVER
              value: postgres
            - name: WEB_SERVER_PORT
              value: "8080"
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "False"

# ======= DAGS_FOLDER parameters from airflow-cwl-docker/.env_example_postgres_conda
            - name: DAGS_FOLDER
              value: "/opt/airflow/dags"
            - name: _AIRFLOW_WWW_USER_USERNAME
              value: airflow
            - name: _AIRFLOW_WWW_USER_PASSWORD
              value: airflow
            - name: BASE_URL
              value: "http://localhost:8080"
            - name: AIRFLOW__WEBSERVER__EXPOSE_CONFIG
              value: "True"

# ======= Mapped volumes from airflow-cwl-docker/.env_example_postgres_conda
            - name: PROJECT_DIR
              value: "./project"

# ======= DAGS_DIR from airflow-cwl-docker/.env_example_postgres_conda. Environment variable on host! Do not override if you set DAGS_FOLDER variable
            - name: DAGS_DIR
              value: "./dags"
            - name: LOGS_DIR
              value: "./airflow-logs"
            - name: CWL_TMP_FOLDER
              value: "./cwl_tmp_folder"
            - name: CWL_INPUTS_FOLDER
              value: "./cwl_inputs_folder"
            - name: CWL_OUTPUTS_FOLDER
              value: "./cwl_outputs_folder"
            - name: CWL_PICKLE_FOLDER
              value: "./cwl_pickle_folder"

          securityContext:
            runAsUser: 0
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          image: "{{ .Values.airflow.output_registry }}/{{ .Values.airflow.project }}/{{ .Values.airflow.name }}"
      serviceAccount: default
      dnsPolicy: ClusterFirst
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
